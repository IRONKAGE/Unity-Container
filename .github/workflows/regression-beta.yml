# https://dotnet.microsoft.com/download/dotnet-core
# https://dotnet.microsoft.com/download/dotnet-framework

name: Regression Tests

on:
  push:
    branches:
      - 'release/**'    
    # paths:
    #   - 'src/*'
    #   - 'test/*'
    #   - '.github/workflows/*'

  pull_request:
    branches: [ master, develop ]

jobs:
  # build:
  #   runs-on: windows-latest
  #   env:
  #     containerProject:  '${{ github.workspace }}\Container\src\Unity.Container.csproj'
  #     PackageVersion: '0.0.0'
  #     UpdateVersionProperties: 'false'

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #     with:
  #       path: Container

  #   - name: Cache
  #     id: unity-container
  #     uses: actions/cache@v1
  #     with:
  #       path: '${{ github.workspace }}/package'
  #       key: ${{ github.sha }}

  #   - name: Setup local NuGet source
  #     run: dotnet nuget add source "https://nuget.pkg.github.com/unitycontainer/index.json" -n github -u unitycontainer -p ${{secrets.GITHUB_TOKEN}} --store-password-in-clear-text

  #   - name: Add Unity.Abstractions
  #     run: | 
  #       dotnet remove ${{ env.containerProject }} reference "..\..\Abstractions\src\Unity.Abstractions.csproj"
  #       dotnet add ${{ env.containerProject }} package Unity.Abstractions --version *-beta*

  #   - name: Build
  #     run: dotnet msbuild -property:Configuration=Release -verbosity:m -restore:True Container\src


  # net:
  #   needs: [ Build ]
  #   strategy:
  #     matrix:
  #       framework: ['net48', 'net47', 'net46', 'net45']
  #   runs-on:  windows-latest
  #   env:
  #     TargetFramework: ${{ matrix.framework }}
  #     containerProject:  '${{ github.workspace }}\Container\src\Unity.Container.csproj'

  #   steps:
  #   - name: Checkout Container
  #     uses: actions/checkout@v2
  #     with:
  #       path: Container

  #   - name: Checkout Tests
  #     uses: actions/checkout@v2
  #     with:
  #       repository: 'unitycontainer/specification-tests'
  #       path: SpecificationTests

  #   - name: Cache
  #     id: unity-container
  #     uses: actions/cache@v1
  #     with:
  #       path: '${{ github.workspace }}\Container\src\bin\Release'
  #       key: ${{ github.sha }}
  
  #   - name: Build
  #     run: |
  #       dotnet msbuild -property:Configuration=Release -verbosity:m -restore:True ${{ github.workspace }}\Container\tests\Unity.Tests\Unity.Tests.csproj
  #       dotnet msbuild -property:Configuration=Release -verbosity:m -restore:True ${{ github.workspace }}\Container\tests\Unity.Specification\Unity.Specification.Tests.csproj
  #       dotnet msbuild -property:Configuration=Release -verbosity:m -restore:True ${{ github.workspace }}\Container\tests\Unity.Diagnostic\Unity.Specification.Tests.Diagnostic.csproj

  #   - name: Test
  #     run: |
  #       dotnet test ${{ github.workspace }}\Container\tests\Unity.Tests
  #       dotnet test ${{ github.workspace }}\Container\tests\Unity.Specification
  #       dotnet test ${{ github.workspace }}\Container\tests\Unity.Diagnostic


  # core-lts-2:
  #   needs: [ Build ]
  #   strategy:
  #     matrix:
  #       os: [windows-latest]
  #   runs-on:  ${{ matrix.os }}
  #   env:
  #     TargetFramework: netcoreapp2.0

  #   steps:
  #   - name: Checkout Container
  #     uses: actions/checkout@v2
  #     with:
  #       path: Container
  #   - name: Checkout Tests
  #     uses: actions/checkout@v2
  #     with:
  #       repository: 'unitycontainer/specification-tests'
  #       path: SpecificationTests

  #   - name: Install DotNet
  #     uses: actions/setup-dotnet@v1
  #     with:
  #       dotnet-version: '2.1.806'

  #   - name: Cache
  #     id: unity-container
  #     uses: actions/cache@v1
  #     with:
  #       path: '${{ github.workspace }}/Container/src/bin/Release'
  #       key: ${{ github.sha }}

  #   - name: Build
  #     run: |
  #       dotnet msbuild -property:Configuration=Release -verbosity:m -restore:True ${{ github.workspace }}/Container/tests/Unity.Tests/Unity.Tests.csproj
  #       dotnet msbuild -property:Configuration=Release -verbosity:m -restore:True ${{ github.workspace }}/Container/tests/Unity.Specification/Unity.Specification.Tests.csproj
  #       dotnet msbuild -property:Configuration=Release -verbosity:m -restore:True ${{ github.workspace }}/Container/tests/Unity.Diagnostic/Unity.Specification.Tests.Diagnostic.csproj

  #   - name: Test
  #     run: |
  #       dotnet test ${{ github.workspace }}/Container/tests/Unity.Tests
  #       dotnet test ${{ github.workspace }}/Container/tests/Unity.Specification
  #       dotnet test ${{ github.workspace }}/Container/tests/Unity.Diagnostic


  core-lts-3:
    # needs: [ Build ]
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    runs-on:  ${{ matrix.os }}
    env:
      TargetFramework: netcoreapp3.1
      PackageVersion: '0.0.0'
      UpdateVersionProperties: 'false'
      UnityTests: ${{ github.workspace }}/Container/tests/Unity.Tests/Unity.Tests.csproj
      UnitySpecTests: ${{ github.workspace }}/Container/tests/Unity.Specification/Unity.Specification.Tests.csproj
      UnityDiagTests: ${{ github.workspace }}/Container/tests/Unity.Diagnostic/Unity.Specification.Tests.Diagnostic.csproj
      SpecificationTests: ${{ github.workspace }}/SpecificationTests/optimized/Unity.Specification.csproj
      DiagnosticTests: ${{ github.workspace }}/SpecificationTests/diagnostic/Unity.Specification.Diagnostic.csproj

    steps:
    - name: Checkout Container
      uses: actions/checkout@v2
      with:
        path: Container

    - name: Checkout Tests
      uses: actions/checkout@v2
      with:
        repository: 'unitycontainer/specification-tests'
        path: SpecificationTests

    - name: Install DotNet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.300'

    - name: Cache
      id: unity-container
      uses: actions/cache@v1
      with:
        path: '${{ github.workspace }}/package'
        # key: ${{ github.sha }}
        key: '6f74ecaed99ba789353d889c32a1d038278a7b27'

    - name: Remove Container References
      run: | 
        dotnet remove ${{ env.UnityTests }}         reference "..\..\src\Unity.Container.csproj"
        dotnet remove ${{ env.UnitySpecTests }}     reference "..\..\src\Unity.Container.csproj"
        dotnet remove ${{ env.UnityDiagTests }}     reference "..\..\src\Unity.Container.csproj"
        dotnet remove ${{ env.SpecificationTests }} reference "..\..\src\Unity.Container.csproj"
        dotnet remove ${{ env.DiagnosticTests }}    reference "..\..\src\Unity.Container.csproj"

    - name: Setup local NuGet source
      run: dotnet nuget add source "https://nuget.pkg.github.com/unitycontainer/index.json" -n github -u unitycontainer -p ${{secrets.GITHUB_TOKEN}} --store-password-in-clear-text

    - name: Add Unity.Container package
      run: | 
        dotnet add ${{ env.UnityTests }}         package --source '${{ github.workspace }}/package' Unity.Container --version 0.0.0 --no-restore
        dotnet add ${{ env.UnitySpecTests }}     package --source '${{ github.workspace }}/package' Unity.Container --version 0.0.0 --no-restore
        dotnet add ${{ env.UnityDiagTests }}     package --source '${{ github.workspace }}/package' Unity.Container --version 0.0.0 --no-restore
        dotnet add ${{ env.SpecificationTests }} package --source '${{ github.workspace }}/package' Unity.Container --version 0.0.0 --no-restore
        dotnet add ${{ env.DiagnosticTests }}    package --source '${{ github.workspace }}/package' Unity.Container --version 0.0.0 --no-restore

    - name: Build
      run: |
        dotnet msbuild -property:Configuration=Release -verbosity:m -restore:True ${{ env.UnityTests }}
        dotnet msbuild -property:Configuration=Release -verbosity:m -restore:True ${{ env.UnitySpecTests }}
        dotnet msbuild -property:Configuration=Release -verbosity:m -restore:True ${{ env.UnityDiagTests }}

    - name: Test
      run: |
        dotnet test ${{ github.workspace }}/Container/tests/Unity.Tests
        dotnet test ${{ github.workspace }}/Container/tests/Unity.Specification
        dotnet test ${{ github.workspace }}/Container/tests/Unity.Diagnostic
